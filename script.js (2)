// Navigation functionality
document.addEventListener('DOMContentLoaded', function() {
    // Navigation
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('section');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Remove active class from all links and sections
            navLinks.forEach(l => l.classList.remove('active'));
            sections.forEach(s => s.classList.remove('active'));
            
            // Add active class to clicked link
            this.classList.add('active');
            
            // Show corresponding section
            const sectionId = this.getAttribute('data-section');
            document.getElementById(sectionId).classList.add('active');
            
            // Scroll to top
            window.scrollTo(0, 0);
        });
    });
    
    // Project modals
    const clickableProjects = document.querySelectorAll('.clickable-project');
    const projectOverlay = document.querySelector('.project-overlay');
    const projectDetails = document.querySelectorAll('.project-detail');
    const closeButtons = document.querySelectorAll('.close-project');
    
    clickableProjects.forEach(project => {
        project.addEventListener('click', function() {
            const projectId = this.getAttribute('data-project');
            const projectDetail = document.getElementById(`project-${projectId}`);
            
            // Show overlay and project detail
            projectOverlay.style.display = 'block';
            projectDetail.style.display = 'block';
            document.body.style.overflow = 'hidden';
        });
    });
    
    // Close modals
    function closeModals() {
        projectOverlay.style.display = 'none';
        projectDetails.forEach(detail => {
            detail.style.display = 'none';
        });
        document.body.style.overflow = 'auto';
    }
    
    projectOverlay.addEventListener('click', closeModals);
    closeButtons.forEach(button => {
        button.addEventListener('click', closeModals);
    });
    
    // Prevent project detail from closing when clicking inside it
    projectDetails.forEach(detail => {
        detail.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    });
    
    // Download buttons
    const downloadBtns = document.querySelectorAll('.download-btn');
    downloadBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            alert('Download functionality would be implemented here. In a real application, this would download the actual file.');
        });
    });
    
    // Contact form
    const contactForm = document.querySelector('.contact-form');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Thank you for your message! In a real application, this would be sent to a server.');
            this.reset();
        });
    }
    
    // Check if admin access is requested via URL
    if (window.location.href.includes('adminluce')) {
        showAdminPanel();
    }
    
    // Admin functionality
    const adminPanel = document.getElementById('adminPanel');
    const loginModal = document.getElementById('loginModal');
    const adminTabs = document.querySelectorAll('.admin-tab');
    const adminContents = document.querySelectorAll('.admin-content');
    const loginBtn = document.getElementById('login-btn');
    const logoutBtn = document.getElementById('logout');
    const projectForm = document.getElementById('project-form');
    const textForm = document.getElementById('text-form');
    const imageInput = document.getElementById('project-image');
    const imagePreview = document.getElementById('image-preview');
    const publishProjectBtn = document.getElementById('publish-project');
    const publishTextBtn = document.getElementById('publish-text');
    
    // Check if user is logged in
    const isLoggedIn = localStorage.getItem('adminLoggedIn') === 'true';
    
    // Initialize admin if needed
    if (window.location.href.includes('adminluce')) {
        if (isLoggedIn) {
            adminPanel.classList.add('active');
            loadContent();
        } else {
            loginModal.classList.add('active');
        }
    }
    
    // Event listeners for admin
    adminTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // Update active tab
            adminTabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            
            // Show corresponding content
            adminContents.forEach(content => {
                content.classList.remove('active');
                if (content.id === `${tabId}-admin`) {
                    content.classList.add('active');
                }
            });
        });
    });
    
    loginBtn.addEventListener('click', function() {
        const username = document.getElementById('login-username').value;
        const password = document.getElementById('login-password').value;
        
        // Simple authentication
        if (username === 'admin' && password === 'password') {
            localStorage.setItem('adminLoggedIn', 'true');
            loginModal.classList.remove('active');
            adminPanel.classList.add('active');
            loadContent();
        } else {
            alert('Invalid credentials. Try admin/password');
        }
    });
    
    logoutBtn.addEventListener('click', function() {
        localStorage.setItem('adminLoggedIn', 'false');
        adminPanel.classList.remove('active');
        loginModal.classList.add('active');
    });
    
    // Image preview
    if (imageInput) {
        imageInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        });
    }
    
    // Project form submission
    if (projectForm) {
        projectForm.addEventListener('submit', function(e) {
            e.preventDefault();
            saveProject(false);
        });
    }
    
    // Text form submission
    if (textForm) {
        textForm.addEventListener('submit', function(e) {
            e.preventDefault();
            saveText(false);
        });
    }
    
    // Publish buttons
    if (publishProjectBtn) {
        publishProjectBtn.addEventListener('click', function() {
            saveProject(true);
        });
    }
    
    if (publishTextBtn) {
        publishTextBtn.addEventListener('click', function() {
            saveText(true);
        });
    }
    
    // Function to show admin panel
    function showAdminPanel() {
        document.body.style.overflow = 'hidden';
    }
    
    // Function to save project
    function saveProject(publish) {
        const title = document.getElementById('project-title').value;
        const description = document.getElementById('project-description').value;
        const meta = document.getElementById('project-meta').value;
        const details = document.getElementById('project-details').value;
        const imageFile = document.getElementById('project-image').files[0];
        const downloadFile = document.getElementById('project-download').files[0];
        
        // Get existing projects or initialize empty array
        const projects = JSON.parse(localStorage.getItem('portfolioProjects')) || [];
        
        // Create project object
        const project = {
            id: Date.now(),
            title,
            description,
            meta,
            details,
            published: publish,
            createdAt: new Date().toISOString()
        };
        
        // Handle image file
        if (imageFile) {
            const reader = new FileReader();
            reader.onload = function(e) {
                project.image = e.target.result;
                // Handle download file if exists
                if (downloadFile) {
                    const downloadReader = new FileReader();
                    downloadReader.onload = function(e) {
                        project.download = {
                            name: downloadFile.name,
                            data: e.target.result
                        };
                        completeSaveProject(project, projects);
                    };
                    downloadReader.readAsDataURL(downloadFile);
                } else {
                    completeSaveProject(project, projects);
                }
            };
            reader.readAsDataURL(imageFile);
        } else {
            completeSaveProject(project, projects);
        }
    }
    
    function completeSaveProject(project, projects) {
        projects.push(project);
        localStorage.setItem('portfolioProjects', JSON.stringify(projects));
        alert('Project saved successfully!');
        projectForm.reset();
        imagePreview.style.display = 'none';
        loadContent();
    }
    
    // Function to save text
    function saveText(publish) {
        const title = document.getElementById('text-title').value;
        const content = document.getElementById('text-content').value;
        const meta = document.getElementById('text-meta').value;
        
        // Get existing texts or initialize empty array
        const texts = JSON.parse(localStorage.getItem('portfolioTexts')) || [];
        
        // Create text object
        const text = {
            id: Date.now(),
            title,
            content,
            meta,
            published: publish,
            createdAt: new Date().toISOString()
        };
        
        texts.push(text);
        localStorage.setItem('portfolioTexts', JSON.stringify(texts));
        
        alert('Text saved successfully!');
        textForm.reset();
        loadContent();
    }
    
    // Load content for listing
    function loadContent() {
        loadProjects();
        loadTexts();
    }
    
    function loadProjects() {
        const projectsList = document.getElementById('projects-list');
        const projects = JSON.parse(localStorage.getItem('portfolioProjects')) || [];
        
        if (!projectsList) return;
        
        projectsList.innerHTML = '';
        
        if (projects.length === 0) {
            projectsList.innerHTML = '<p>No projects yet.</p>';
            return;
        }
        
        projects.forEach(project => {
            const projectEl = document.createElement('div');
            projectEl.className = `content-item ${project.published ? 'published' : 'draft'}`;
            projectEl.innerHTML = `
                <h4>${project.title} ${project.published ? '(Published)' : '(Draft)'}</h4>
                <p>${project.meta || 'No metadata'}</p>
                <div class="content-actions">
                    <button class="admin-btn" onclick="editProject(${project.id})">Edit</button>
                    <button class="admin-btn secondary" onclick="togglePublishProject(${project.id}, ${!project.published})">
                        ${project.published ? 'Unpublish' : 'Publish'}
                    </button>
                    <button class="admin-btn secondary" onclick="deleteProject(${project.id})">Delete</button>
                </div>
            `;
            projectsList.appendChild(projectEl);
        });
    }
    
    function loadTexts() {
        const textsList = document.getElementById('texts-list');
        const texts = JSON.parse(localStorage.getItem('portfolioTexts')) || [];
        
        if (!textsList) return;
        
        textsList.innerHTML = '';
        
        if (texts.length === 0) {
            textsList.innerHTML = '<p>No texts yet.</p>';
            return;
        }
        
        texts.forEach(text => {
            const textEl = document.createElement('div');
            textEl.className = `content-item ${text.published ? 'published' : 'draft'}`;
            textEl.innerHTML = `
                <h4>${text.title} ${text.published ? '(Published)' : '(Draft)'}</h4>
                <p>${text.meta || 'No metadata'}</p>
                <div class="content-actions">
                    <button class="admin-btn" onclick="editText(${text.id})">Edit</button>
                    <button class="admin-btn secondary" onclick="togglePublishText(${text.id}, ${!text.published})">
                        ${text.published ? 'Unpublish' : 'Publish'}
                    </button>
                    <button class="admin-btn secondary" onclick="deleteText(${text.id})">Delete</button>
                </div>
            `;
            textsList.appendChild(textEl);
        });
    }
    
    // Make functions available globally
    window.editProject = function(id) {
        const projects = JSON.parse(localStorage.getItem('portfolioProjects')) || [];
        const project = projects.find(p => p.id === id);
        
        if (project) {
            document.getElementById('project-title').value = project.title;
            document.getElementById('project-description').value = project.description;
            document.getElementById('project-meta').value = project.meta || '';
            document.getElementById('project-details').value = project.details || '';
            
            if (project.image) {
                imagePreview.src = project.image;
                imagePreview.style.display = 'block';
            }
            
            // Switch to projects tab
            document.querySelector('[data-tab="projects"]').click();
            
            alert('Edit functionality would be implemented here. For now, create a new project.');
        }
    };
    
    window.togglePublishProject = function(id, publish) {
        const projects = JSON.parse(localStorage.getItem('portfolioProjects')) || [];
        const projectIndex = projects.findIndex(p => p.id === id);
        
        if (projectIndex !== -1) {
            projects[projectIndex].published = publish;
            localStorage.setItem('portfolioProjects', JSON.stringify(projects));
            loadProjects();
        }
    };
    
    window.deleteProject = function(id) {
        if (confirm('Are you sure you want to delete this project?')) {
            let projects = JSON.parse(localStorage.getItem('portfolioProjects')) || [];
            projects = projects.filter(p => p.id !== id);
            localStorage.setItem('portfolioProjects', JSON.stringify(projects));
            loadProjects();
        }
    };
    
    window.editText = function(id) {
        const texts = JSON.parse(localStorage.getItem('portfolioTexts')) || [];
        const text = texts.find(t => t.id === id);
        
        if (text) {
            document.getElementById('text-title').value = text.title;
            document.getElementById('text-content').value = text.content;
            document.getElementById('text-meta').value = text.meta || '';
            
            // Switch to texts tab
            document.querySelector('[data-tab="texts"]').click();
            
            alert('Edit functionality would be implemented here. For now, create a new text.');
        }
    };
    
    window.togglePublishText = function(id, publish) {
        const texts = JSON.parse(localStorage.getItem('portfolioTexts')) || [];
        const textIndex = texts.findIndex(t => t.id === id);
        
        if (textIndex !== -1) {
            texts[textIndex].published = publish;
            localStorage.setItem('portfolioTexts', JSON.stringify(texts));
            loadTexts();
        }
    };
    
    window.deleteText = function(id) {
        if (confirm('Are you sure you want to delete this text?')) {
            let texts = JSON.parse(localStorage.getItem('portfolioTexts')) || [];
            texts = texts.filter(t => t.id !== id);
            localStorage.setItem('portfolioTexts', JSON.stringify(texts));
            loadTexts();
        }
    };
});